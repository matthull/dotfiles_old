filetype on
syntax on
scriptencoding utf-8
filetype plugin on

set number

let mapleader=" "
let maplocalleader=" "

set shell=/bin/sh
inoremap jk <esc>
vnoremap jk <esc>
map ; :

noremap <leader>h ^
noremap <leader>l $

noremap <leader>e ^v$h
vmap <leader>e S=

noremap <leader>a :A<Enter>

autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set history=1000                    " Store a ton of history (default is 20)
set hidden                          " Allow buffer switching without saving

au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

set backup

if has('persistent_undo')
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview 

set clipboard=unnamed

"colorscheme base16-default-dark
hi Search ctermfg=yellow ctermbg=darkgreen
hi IncSearch ctermfg=yellow ctermbg=darkgreen

set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode

set ruler                   " Show the ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
set showcmd                 " Show partial commands in status line and

if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    if !exists('g:override_spf13_bundles')
        set statusline+=%{fugitive#statusline()} " Git Hotness
    endif
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set nowrap                      " Do not wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=2                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
"set matchpairs+=<:>             " Match, to be used with %
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

autocmd FileType haskell,puppet,ruby,rb,yml setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
autocmd BufNewFile,BufRead *.coffee set filetype=coffee

autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType slim setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType coffee setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType zsh setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType sh setlocal ts=2 sts=2 sw=2 expandtab

" Have ctrlp open new files in a tab
let g:ctrlp_open_new_file='t'

autocmd BufRead,BufNewFile *.strap setfiletype zsh
autocmd BufRead,BufNewFile Gemfile setfiletype ruby

let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets-rubymotion/snippets'

nmap <leader>ne :NERDTreeFind<cr>

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
nmap <silent> <leader>/ :nohlsearch<CR>

" Change Working Directory to that of the current file
cmap cd. lcd %:p:h

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

inoremap <leader>. <C-o>A;

"nmap <silent> <Enter> :nohl<CR>
nnoremap <silent> <expr> <CR> &buftype ==# 'quickfix' ? "\<CR>" : ':nohl<CR>'

nmap <silent> <leader>cv :so $MYVIMRC<CR>

map <leader>gh :OpenGithubFile<CR>

setlocal isk-=.

vmap <Leader>t "ay :call Send_to_Tmux(@a)<CR>
nmap <Leader>t "ayy :call Send_to_Tmux(@a)<CR>

nmap <Leader>ag :LAck!<CR>
nmap <Leader>ae "ayiw :LAck! <C-r>a
nmap <Leader>ad "ayiw :LAck 'def <C-r>a'<CR>
nmap <Leader>ac "ayiw :LAck 'class <C-r>a'<CR>
let g:ag_highlight=1
ca ag LAck!

let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1

map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>w <Plug>(easymotion-w)
map s <Plug>(easymotion-s2)
map t <Plug>(easymotion-t2)

"map <Leader>r :wa <CR> :.Rails <CR>
nnoremap <Leader>r yiw:%s/\<<C-r><C-w>\>//g<left><left>

let javascript_enable_domhtmlcss = 1

" Enable powerline symbols
"let g:airline_powerline_fonts = 1

set backupdir=~/.vim/tmp//
set undodir=~/.vim/tmp//
set directory=~/.vim/tmp//

let NERDTreeQuitOnOpen = 1

set iskeyword-=.                    " '.' is an end of word designator
set iskeyword-=#                    " '#' is an end of word designator
set iskeyword-=-                    " '-' is an end of word designator

set backspace=indent,eol,start

nnoremap <C-f> :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set textwidth=120
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix

set encoding=utf-8

let python_highlight_all=1

let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")':   ['<c-j>', '<c-n>'],
    \ 'PrtSelectMove("k")':   ['<c-k>', '<c-p>'],
    \ 'PrtHistory(-1)':       ['<down>'],
    \ 'PrtHistory(1)':        ['<up>'],
    \ }
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'

set textwidth=0
set wrap

let g:syntastic_python_checkers = ['pylint']

au BufNewFile,BufRead *.json.jbuilder set ft=ruby

let g:markdown_fenced_languages = ['html', 'ruby', 'python', 'javascript', 'bash=sh']

set termguicolors
"colorscheme gruvbox
"set background=dark

set nolist

set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//

" Set specific linters
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\    'python': ['black']
\}

let g:ale_linters_explicit = 1

let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1
" Disable ALE auto highlights
let g:ale_set_highlights = 0
let g:ale_ruby_rubocop_options = "-l"

"autocmd FileType html,css EmmetInstall
"let g:user_emmet_leader_key=","


let g:ctrlp_custom_ignore='pythonenv\|node_modules\|tmp'

colorscheme wal

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

let g:black_virtualenv="~/.venv_black"
autocmd BufWritePre *.py execute ':Black'

let g:black_skip_string_normalization=1

let g:flake8_show_in_gutter=0
let g:flake8_show_quickfix=1
let g:flake8_show_in_file=0
let g:flake8_quickfix_height=8
autocmd BufWritePost *.py call flake8#Flake8()

autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>

set clipboard=unnamedplus

nmap <C-l> :YcmCompleter GoTo<CR>
noremap <leader>d :YcmCompleter GetDoc<CR>

" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx
